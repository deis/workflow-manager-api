package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-swagger/go-swagger/httpkit/middleware"
)

// GetPersistentClustersHandlerFunc turns a function with the right signature into a get persistent clusters handler
type GetPersistentClustersHandlerFunc func(GetPersistentClustersParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetPersistentClustersHandlerFunc) Handle(params GetPersistentClustersParams) middleware.Responder {
	return fn(params)
}

// GetPersistentClustersHandler interface for that can handle valid get persistent clusters params
type GetPersistentClustersHandler interface {
	Handle(GetPersistentClustersParams) middleware.Responder
}

// NewGetPersistentClusters creates a new http.Handler for the get persistent clusters operation
func NewGetPersistentClusters(ctx *middleware.Context, handler GetPersistentClustersHandler) *GetPersistentClusters {
	return &GetPersistentClusters{Context: ctx, Handler: handler}
}

/*GetPersistentClusters swagger:route GET /v3/clusters/persistent getPersistentClusters

get persistent clusters

*/
type GetPersistentClusters struct {
	Context *middleware.Context
	Handler GetPersistentClustersHandler
}

func (o *GetPersistentClusters) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetPersistentClustersParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
