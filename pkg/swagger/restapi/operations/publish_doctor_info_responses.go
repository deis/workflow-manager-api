package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-swagger/go-swagger/httpkit"

	"github.com/deis/workflow-manager-api/pkg/swagger/models"
)

/*PublishDoctorInfoOK publish doctorInfo response

swagger:response publishDoctorInfoOK
*/
type PublishDoctorInfoOK struct {
}

// NewPublishDoctorInfoOK creates PublishDoctorInfoOK with default headers values
func NewPublishDoctorInfoOK() *PublishDoctorInfoOK {
	return &PublishDoctorInfoOK{}
}

// WriteResponse to the client
func (o *PublishDoctorInfoOK) WriteResponse(rw http.ResponseWriter, producer httpkit.Producer) {

	rw.WriteHeader(200)
}

/*PublishDoctorInfoDefault unexpected error

swagger:response publishDoctorInfoDefault
*/
type PublishDoctorInfoDefault struct {
	_statusCode int

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewPublishDoctorInfoDefault creates PublishDoctorInfoDefault with default headers values
func NewPublishDoctorInfoDefault(code int) *PublishDoctorInfoDefault {
	if code <= 0 {
		code = 500
	}

	return &PublishDoctorInfoDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the publish doctor info default response
func (o *PublishDoctorInfoDefault) WithStatusCode(code int) *PublishDoctorInfoDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the publish doctor info default response
func (o *PublishDoctorInfoDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the publish doctor info default response
func (o *PublishDoctorInfoDefault) WithPayload(payload *models.Error) *PublishDoctorInfoDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the publish doctor info default response
func (o *PublishDoctorInfoDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PublishDoctorInfoDefault) WriteResponse(rw http.ResponseWriter, producer httpkit.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
