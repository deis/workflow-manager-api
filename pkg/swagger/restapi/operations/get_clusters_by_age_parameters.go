package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit"

	strfmt "github.com/go-swagger/go-swagger/strfmt"
)

// NewGetClustersByAgeParams creates a new GetClustersByAgeParams object
// with the default values initialized.
func NewGetClustersByAgeParams() GetClustersByAgeParams {
	var ()
	return GetClustersByAgeParams{}
}

// GetClustersByAgeParams contains all the bound params for the get clusters by age operation
// typically these are obtained from a http.Request
//
// swagger:parameters getClustersByAge
type GetClustersByAgeParams struct {
	/*
	  In: query
	*/
	CheckedInAfter *strfmt.DateTime
	/*
	  In: query
	*/
	CheckedInBefore *strfmt.DateTime
	/*
	  In: query
	*/
	CreatedAfter *strfmt.DateTime
	/*
	  In: query
	*/
	CreatedBefore *strfmt.DateTime
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *GetClustersByAgeParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	qs := httpkit.Values(r.URL.Query())

	qCheckedInAfter, qhkCheckedInAfter, _ := qs.GetOK("checked_in_after")
	if err := o.bindCheckedInAfter(qCheckedInAfter, qhkCheckedInAfter, route.Formats); err != nil {
		res = append(res, err)
	}

	qCheckedInBefore, qhkCheckedInBefore, _ := qs.GetOK("checked_in_before")
	if err := o.bindCheckedInBefore(qCheckedInBefore, qhkCheckedInBefore, route.Formats); err != nil {
		res = append(res, err)
	}

	qCreatedAfter, qhkCreatedAfter, _ := qs.GetOK("created_after")
	if err := o.bindCreatedAfter(qCreatedAfter, qhkCreatedAfter, route.Formats); err != nil {
		res = append(res, err)
	}

	qCreatedBefore, qhkCreatedBefore, _ := qs.GetOK("created_before")
	if err := o.bindCreatedBefore(qCreatedBefore, qhkCreatedBefore, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetClustersByAgeParams) bindCheckedInAfter(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := formats.Parse("date-time", raw)
	if err != nil {
		return errors.InvalidType("checked_in_after", "query", "strfmt.DateTime", raw)
	}
	o.CheckedInAfter = (value.(*strfmt.DateTime))

	return nil
}

func (o *GetClustersByAgeParams) bindCheckedInBefore(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := formats.Parse("date-time", raw)
	if err != nil {
		return errors.InvalidType("checked_in_before", "query", "strfmt.DateTime", raw)
	}
	o.CheckedInBefore = (value.(*strfmt.DateTime))

	return nil
}

func (o *GetClustersByAgeParams) bindCreatedAfter(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := formats.Parse("date-time", raw)
	if err != nil {
		return errors.InvalidType("created_after", "query", "strfmt.DateTime", raw)
	}
	o.CreatedAfter = (value.(*strfmt.DateTime))

	return nil
}

func (o *GetClustersByAgeParams) bindCreatedBefore(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := formats.Parse("date-time", raw)
	if err != nil {
		return errors.InvalidType("created_before", "query", "strfmt.DateTime", raw)
	}
	o.CreatedBefore = (value.(*strfmt.DateTime))

	return nil
}
