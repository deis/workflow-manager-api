package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-swagger/go-swagger/httpkit/middleware"
)

// PublishComponentReleaseHandlerFunc turns a function with the right signature into a publish component release handler
type PublishComponentReleaseHandlerFunc func(PublishComponentReleaseParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PublishComponentReleaseHandlerFunc) Handle(params PublishComponentReleaseParams) middleware.Responder {
	return fn(params)
}

// PublishComponentReleaseHandler interface for that can handle valid publish component release params
type PublishComponentReleaseHandler interface {
	Handle(PublishComponentReleaseParams) middleware.Responder
}

// NewPublishComponentRelease creates a new http.Handler for the publish component release operation
func NewPublishComponentRelease(ctx *middleware.Context, handler PublishComponentReleaseHandler) *PublishComponentRelease {
	return &PublishComponentRelease{Context: ctx, Handler: handler}
}

/*PublishComponentRelease swagger:route POST /v3/versions/{train}/{component}/{release} publishComponentRelease

publish a new release for the component

*/
type PublishComponentRelease struct {
	Context *middleware.Context
	Handler PublishComponentReleaseHandler
}

func (o *PublishComponentRelease) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewPublishComponentReleaseParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
