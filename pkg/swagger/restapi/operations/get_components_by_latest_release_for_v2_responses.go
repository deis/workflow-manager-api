package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-swagger/go-swagger/httpkit"

	"github.com/deis/workflow-manager-api/pkg/swagger/models"
)

/*GetComponentsByLatestReleaseForV2OK component releases response

swagger:response getComponentsByLatestReleaseForV2OK
*/
type GetComponentsByLatestReleaseForV2OK struct {

	// In: body
	Payload GetComponentsByLatestReleaseForV2OKBodyBody `json:"body,omitempty"`
}

// NewGetComponentsByLatestReleaseForV2OK creates GetComponentsByLatestReleaseForV2OK with default headers values
func NewGetComponentsByLatestReleaseForV2OK() *GetComponentsByLatestReleaseForV2OK {
	return &GetComponentsByLatestReleaseForV2OK{}
}

// WithPayload adds the payload to the get components by latest release for v2 o k response
func (o *GetComponentsByLatestReleaseForV2OK) WithPayload(payload GetComponentsByLatestReleaseForV2OKBodyBody) *GetComponentsByLatestReleaseForV2OK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get components by latest release for v2 o k response
func (o *GetComponentsByLatestReleaseForV2OK) SetPayload(payload GetComponentsByLatestReleaseForV2OKBodyBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetComponentsByLatestReleaseForV2OK) WriteResponse(rw http.ResponseWriter, producer httpkit.Producer) {

	rw.WriteHeader(200)
	if err := producer.Produce(rw, o.Payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

/*GetComponentsByLatestReleaseForV2Default unexpected error

swagger:response getComponentsByLatestReleaseForV2Default
*/
type GetComponentsByLatestReleaseForV2Default struct {
	_statusCode int

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetComponentsByLatestReleaseForV2Default creates GetComponentsByLatestReleaseForV2Default with default headers values
func NewGetComponentsByLatestReleaseForV2Default(code int) *GetComponentsByLatestReleaseForV2Default {
	if code <= 0 {
		code = 500
	}

	return &GetComponentsByLatestReleaseForV2Default{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get components by latest release for v2 default response
func (o *GetComponentsByLatestReleaseForV2Default) WithStatusCode(code int) *GetComponentsByLatestReleaseForV2Default {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get components by latest release for v2 default response
func (o *GetComponentsByLatestReleaseForV2Default) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get components by latest release for v2 default response
func (o *GetComponentsByLatestReleaseForV2Default) WithPayload(payload *models.Error) *GetComponentsByLatestReleaseForV2Default {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get components by latest release for v2 default response
func (o *GetComponentsByLatestReleaseForV2Default) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetComponentsByLatestReleaseForV2Default) WriteResponse(rw http.ResponseWriter, producer httpkit.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
