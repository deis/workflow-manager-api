package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-swagger/go-swagger/httpkit/middleware"
)

// GetComponentByLatestReleaseHandlerFunc turns a function with the right signature into a get component by latest release handler
type GetComponentByLatestReleaseHandlerFunc func(GetComponentByLatestReleaseParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetComponentByLatestReleaseHandlerFunc) Handle(params GetComponentByLatestReleaseParams) middleware.Responder {
	return fn(params)
}

// GetComponentByLatestReleaseHandler interface for that can handle valid get component by latest release params
type GetComponentByLatestReleaseHandler interface {
	Handle(GetComponentByLatestReleaseParams) middleware.Responder
}

// NewGetComponentByLatestRelease creates a new http.Handler for the get component by latest release operation
func NewGetComponentByLatestRelease(ctx *middleware.Context, handler GetComponentByLatestReleaseHandler) *GetComponentByLatestRelease {
	return &GetComponentByLatestRelease{Context: ctx, Handler: handler}
}

/*GetComponentByLatestRelease swagger:route GET /versions/{train}/{component}/latest getComponentByLatestRelease

read the latest release of a component

*/
type GetComponentByLatestRelease struct {
	Context *middleware.Context
	Handler GetComponentByLatestReleaseHandler
}

func (o *GetComponentByLatestRelease) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetComponentByLatestReleaseParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
