package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-swagger/go-swagger/httpkit/middleware"
)

// PublishDoctorInfoHandlerFunc turns a function with the right signature into a publish doctor info handler
type PublishDoctorInfoHandlerFunc func(PublishDoctorInfoParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PublishDoctorInfoHandlerFunc) Handle(params PublishDoctorInfoParams) middleware.Responder {
	return fn(params)
}

// PublishDoctorInfoHandler interface for that can handle valid publish doctor info params
type PublishDoctorInfoHandler interface {
	Handle(PublishDoctorInfoParams) middleware.Responder
}

// NewPublishDoctorInfo creates a new http.Handler for the publish doctor info operation
func NewPublishDoctorInfo(ctx *middleware.Context, handler PublishDoctorInfoHandler) *PublishDoctorInfo {
	return &PublishDoctorInfo{Context: ctx, Handler: handler}
}

/*PublishDoctorInfo swagger:route POST /v3/doctor/{uuid} publishDoctorInfo

publish doctor info to Workflow Manager API

*/
type PublishDoctorInfo struct {
	Context *middleware.Context
	Handler PublishDoctorInfoHandler
}

func (o *PublishDoctorInfo) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewPublishDoctorInfoParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
