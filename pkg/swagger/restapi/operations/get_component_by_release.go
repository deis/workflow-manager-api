package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-swagger/go-swagger/httpkit/middleware"
)

// GetComponentByReleaseHandlerFunc turns a function with the right signature into a get component by release handler
type GetComponentByReleaseHandlerFunc func(GetComponentByReleaseParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetComponentByReleaseHandlerFunc) Handle(params GetComponentByReleaseParams) middleware.Responder {
	return fn(params)
}

// GetComponentByReleaseHandler interface for that can handle valid get component by release params
type GetComponentByReleaseHandler interface {
	Handle(GetComponentByReleaseParams) middleware.Responder
}

// NewGetComponentByRelease creates a new http.Handler for the get component by release operation
func NewGetComponentByRelease(ctx *middleware.Context, handler GetComponentByReleaseHandler) *GetComponentByRelease {
	return &GetComponentByRelease{Context: ctx, Handler: handler}
}

/*GetComponentByRelease swagger:route GET /v3/versions/{train}/{component}/{release} getComponentByRelease

read the specified release of a component

*/
type GetComponentByRelease struct {
	Context *middleware.Context
	Handler GetComponentByReleaseHandler
}

func (o *GetComponentByRelease) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetComponentByReleaseParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
