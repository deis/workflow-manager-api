package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-swagger/go-swagger/strfmt"
	"github.com/go-swagger/go-swagger/swag"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/validate"
)

/*ClusterCheckin cluster checkin

swagger:model clusterCheckin
*/
type ClusterCheckin struct {

	/* checkins

	Required: true
	*/
	Checkins int64 `json:"checkins"`

	/* cluster age

	Required: true
	Min Length: 1
	*/
	ClusterAge string `json:"clusterAge"`

	/* cluster ID

	Required: true
	Min Length: 1
	*/
	ClusterID string `json:"clusterID"`

	/* first seen

	Required: true
	Min Length: 1
	*/
	FirstSeen string `json:"firstSeen"`

	/* last checkin

	Min Length: 1
	*/
	LastCheckin string `json:"lastCheckin,omitempty"`

	/* last seen

	Required: true
	Min Length: 1
	*/
	LastSeen string `json:"lastSeen"`
}

// Validate validates this cluster checkin
func (m *ClusterCheckin) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCheckins(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateClusterAge(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateClusterID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFirstSeen(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLastCheckin(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLastSeen(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterCheckin) validateCheckins(formats strfmt.Registry) error {

	if err := validate.Required("checkins", "body", int64(m.Checkins)); err != nil {
		return err
	}

	return nil
}

func (m *ClusterCheckin) validateClusterAge(formats strfmt.Registry) error {

	if err := validate.RequiredString("clusterAge", "body", string(m.ClusterAge)); err != nil {
		return err
	}

	if err := validate.MinLength("clusterAge", "body", string(m.ClusterAge), 1); err != nil {
		return err
	}

	return nil
}

func (m *ClusterCheckin) validateClusterID(formats strfmt.Registry) error {

	if err := validate.RequiredString("clusterID", "body", string(m.ClusterID)); err != nil {
		return err
	}

	if err := validate.MinLength("clusterID", "body", string(m.ClusterID), 1); err != nil {
		return err
	}

	return nil
}

func (m *ClusterCheckin) validateFirstSeen(formats strfmt.Registry) error {

	if err := validate.RequiredString("firstSeen", "body", string(m.FirstSeen)); err != nil {
		return err
	}

	if err := validate.MinLength("firstSeen", "body", string(m.FirstSeen), 1); err != nil {
		return err
	}

	return nil
}

func (m *ClusterCheckin) validateLastCheckin(formats strfmt.Registry) error {

	if swag.IsZero(m.LastCheckin) { // not required
		return nil
	}

	if err := validate.MinLength("lastCheckin", "body", string(m.LastCheckin), 1); err != nil {
		return err
	}

	return nil
}

func (m *ClusterCheckin) validateLastSeen(formats strfmt.Registry) error {

	if err := validate.RequiredString("lastSeen", "body", string(m.LastSeen)); err != nil {
		return err
	}

	if err := validate.MinLength("lastSeen", "body", string(m.LastSeen), 1); err != nil {
		return err
	}

	return nil
}
