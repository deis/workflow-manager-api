package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-swagger/go-swagger/strfmt"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/validate"
)

/*Version version

swagger:model version
*/
type Version struct {

	/* data
	 */
	Data *Data `json:"data,omitempty"`

	/* released

	Min Length: 1
	*/
	Released string `json:"released,omitempty"`

	/* train

	Required: true
	Min Length: 1
	*/
	Train string `json:"train"`

	/* version

	Min Length: 1
	*/
	Version string `json:"version,omitempty"`
}

// Validate validates this version
func (m *Version) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateReleased(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTrain(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Version) validateReleased(formats strfmt.Registry) error {

	if swag.IsZero(m.Released) { // not required
		return nil
	}

	if err := validate.MinLength("released", "body", string(m.Released), 1); err != nil {
		return err
	}

	return nil
}

func (m *Version) validateTrain(formats strfmt.Registry) error {

	if err := validate.RequiredString("train", "body", string(m.Train)); err != nil {
		return err
	}

	if err := validate.MinLength("train", "body", string(m.Train), 1); err != nil {
		return err
	}

	return nil
}

func (m *Version) validateVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.Version) { // not required
		return nil
	}

	if err := validate.MinLength("version", "body", string(m.Version), 1); err != nil {
		return err
	}

	return nil
}
